(function(a,b){if("function"==typeof define&&define.amd)define(["exports"],b);else if("undefined"!=typeof exports)b(exports);else{var c={exports:{}};b(c.exports),a.touchsweep=c.exports}})("undefined"==typeof globalThis?"undefined"==typeof self?this:self:globalThis,function(a){"use strict";function b(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function c(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function d(a,b,d){return b&&c(a.prototype,b),d&&c(a,d),Object.defineProperty(a,"prototype",{writable:!1}),a}Object.defineProperty(a,"__esModule",{value:!0}),a["default"]=a.TouchSwipeEventType=void 0;/**
 * @enum {string}
 */var e={tap:"tap",up:"swipeup",down:"swipedown",left:"swipeleft",right:"swiperight"};a.TouchSwipeEventType=e;var f=/*#__PURE__*/function(){/**
	 * Create a new TouchSweep instance
	 * @constructor
	 * @param {HTMLElement} element
	 * @param {Record<string, any>} data
	 * @param {number} threshold
	 * @return {TouchSweep}
	 */function a(){var c=0<arguments.length&&void 0!==arguments[0]?arguments[0]:document.body,d=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{},e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:40;return b(this,a),this.element=c,this.eventData=d,this.threshold=e,this.coords={startX:0,startY:0,endX:0,endY:0},this.onStart=this.onStart.bind(this),this.onEnd=this.onEnd.bind(this),this.bind(),this}/**
	 * Get X and Y coordinates from a mouse or touch event
	 * @private
	 * @param {MouseEvent | TouchEvent} event
	 * @return {Record<'x' | 'y', number>}
	 */return d(a,[{key:"getCoords",value:function getCoords(a){var b="mousedown"===a.type||"mouseup"===a.type,c=b?a.pageX:a.changedTouches[0].screenX,d=b?a.pageY:a.changedTouches[0].screenY;return{x:c,y:d}}/**
	 * Set start X and Y coordinates
	 * @private
	 * @param {MouseEvent | TouchEvent} event
	 * @return {void}
	 */},{key:"onStart",value:function onStart(a){var b=this.getCoords(a),c=b.x,d=b.y;this.coords.startX=c,this.coords.startY=d}/**
	 * Set end X and Y coordinates
	 * @private
	 * @param {MouseEvent | TouchEvent} event
	 * @return {void}
	 */},{key:"onEnd",value:function onEnd(a){var b=this.getCoords(a),c=b.x,d=b.y;this.coords.endX=c,this.coords.endY=d,this.dispatch()}/**
	 * Add event listeners
	 * @public
	 * @return {void}
	 */},{key:"bind",value:function bind(){this.element.addEventListener("touchstart",this.onStart,!1),this.element.addEventListener("touchend",this.onEnd,!1),this.element.addEventListener("mousedown",this.onStart,!1),this.element.addEventListener("mouseup",this.onEnd,!1)}/**
	 * Remove event listeners
	 * @public
	 * @return {void}
	 */},{key:"unbind",value:function unbind(){this.element.removeEventListener("touchstart",this.onStart,!1),this.element.removeEventListener("touchend",this.onEnd,!1),this.element.removeEventListener("mousedown",this.onStart,!1),this.element.removeEventListener("mouseup",this.onEnd,!1)}/**
	 * Get the event name based on the swipe direction
	 * @private
	 * @return {TouchSwipeEventType | ''}
	 */},{key:"getEventName",value:function getEventName(){var a=Math.abs,b=this.threshold,c=this.coords,d=c.startX,f=c.startY,g=c.endX,h=c.endY;return g<d&&a(g-d)>b?e.left:g>d&&a(g-d)>b?e.right:h<f&&a(h-f)>b?e.up:h>f&&a(h-f)>b?e.down:h===f&&g===d?e.tap:""}/**
	 * Dispatch an event
	 * @private
	 * @return {void}
	 */},{key:"dispatch",value:function dispatch(){var a=this.getEventName();if(a){var b=new CustomEvent(a,{detail:this.eventData});this.element.dispatchEvent(b)}}}]),a}();a["default"]=f});
